{"version":3,"sources":["icons/poker.svg","components/card/card.jsx","components/board/board.jsx","deck.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","handleClick","id","flipped","height","width","front","disabled","solved","className","style","onClick","src","BackImage","Board","cards","dimension","map","card","key","type","includes","photoURL","initalizeDeck","reduce","acc","randNumber","Math","floor","random","push","array","_array","slice","i","length","randomIndex","temp","shuffle","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","initaliseDeck","resetCards","sameCardClicked","isMatch","clickedCard","find","resizeListener","window","addEventListener","removeEventListener","min","document","documentElement","clientWidth","clientHeight","setTimeout","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7483e8be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poker.63538a65.svg\";","import React from 'react';\n// TODO: Proptypes guarntees that the \n// props received are the props expected\nimport PropTypes from 'prop-types';\nimport './cardStyle.css';\nimport BackImage from '../../icons/poker.svg'\n\n// TODO: destructured props\nexport default function Card({ \n    handleClick, \n    id, \n    flipped, \n    height, \n    width,\n    front,\n    disabled,\n    solved \n}) {\n    return <div \n        className={`flip-container ${flipped ? 'flipped' : ''}`}\n        style={{\n            width, height\n        }}\n        onClick={() => disabled ? null : handleClick(id)}\n    >\n        <div className=\"flipper\">\n            <img\n                style={{\n                    height, width\n                }}\n                className={flipped ? 'front' : 'back'}\n                src={flipped || solved ? front : BackImage }\n            ></img>\n        </div>\n    </div>\n\n}\n\nCard.propTypes = {\n    handleClick: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    solved: PropTypes.bool.isRequired,\n    back: PropTypes.string.isRequired,\n    front: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    disabled: PropTypes.bool.isRequired,\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../card/card';\nimport './boardStyles.css'\n\nexport default function Board({ \n    cards,\n    flipped,\n    handleClick,\n    dimension,\n    disabled,\n    solved\n}) {\n    return <div className = \"board\">\n        {\n            cards.map(card =>(\n                <Card\n                    key ={card.id}\n                    type={card.type} \n                    id={card.id}\n                    width={dimension / 4.5}\n                    height={dimension / 3}\n                    flipped={flipped.includes(card.id)}\n                    handleClick={handleClick}\n                    front={card.photoURL}\n                    solved={solved.includes(card.id)}\n                    disabled={disabled || solved.includes(card.id)}\n                />\n            ))\n        }\n    </div>\n}\n\nBoard.propTypes = {\n    dimension: PropTypes.number.isRequired,\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n    handleClick: PropTypes.func.isRequired,\n    disabled: PropTypes.bool.isRequired,\n}\n","function shuffle(array){\n    const _array = array.slice(0);\n    for (let i = 0; i < array.length; i++) {\n        let randomIndex = Math.floor(Math.random() * (i + 1))\n        let temp = _array[i]\n        _array[i] = _array[randomIndex]\n        _array[randomIndex] = temp\n    }\n    return _array\n}\n\nexport default function initalizeDeck(){\n    let id = 0\n    // TODO: will need to change this\n    const cards = ['pair1', 'pair2', 'pair3', 'pair4', 'pair5', 'pair5', 'pair7'\n    ].reduce((acc, type) => {\n        const randNumber = Math.floor(Math.random() * (200));\n        const photoURL = `https://i.picsum.photos/id/${ randNumber }/200/300.jpg`;\n        acc.push({\n            id: id++,\n            photoURL,\n            type\n        })\n        acc.push({\n            id: id++,\n            photoURL,\n            type\n        })\n        return acc\n    }, [])\n\n    // Add one more card to make it the required 15\n\n    // Get an extra photo\n    const photoURL = `https://i.picsum.photos/id/300/200/300.jpg`;\n    cards.push({\n        id: 15,\n        photoURL,\n        type: \"pair8\"\n    })\n\n    return shuffle(cards)\n}\n\n\n// Icons made by <a href=\"https://www.flaticon.com/authors/monkik\" title=\"monkik\">monkik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './components/board/board'\nimport initaliseDeck from './deck'\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  // TODO: replaces component did mount\n  useEffect(() => {\n    resizeBoard()\n    setCards(initaliseDeck())\n  }, [])\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n    } else {\n      if (sameCardClicked(id)) return\n      setFlipped([flipped[0], id])\n      if(isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards() \n      } else {\n        // reset the cards\n        setTimeout(resetCards, 1200)\n      }\n    }\n    // setFlipped([...flipped, id])\n  }\n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find(card => card.id === id)\n    const flippedCard = cards.find(card => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type \n  };\n\n  // TODO: replaces component did unmount\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ),\n    )\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Memory game</h1>\n      <Board\n        dimension={dimension} \n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n\n      <hr></hr>\n      Josh Parry\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}